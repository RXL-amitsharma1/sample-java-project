/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.codacy.test;

import java.util.HashSet;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NullCipher;

import java.lang.NumberFormatException;

public class Library {
    public boolean someLibraryMethod() {
        return true;
    }

    @Nonnull
    public Object testObject(Object o, byte[] plainText) throws IllegalBlockSizeException, BadPaddingException {
        Cipher doNothingCihper = new NullCipher();
        byte[] cipherText = doNothingCihper.doFinal(plainText);

        return o;
    }

    public void testIL_CONTAINER_ADDED_TO_ITSELF() {
        Set<Object> l = new HashSet<>();
        l.add("test");
        l.add(l);
    }

    public String tostring() {
        return "this is an issue";
    }
    
    public void getAccessKey() {
        byte[] iv = "secret key in here".getBytes();
        byte[] iv2 = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };
        byte[] iv3 = "secret iv in here".getBytes();

    }
    
    void towerOfHanoi(int n, char from_rod, char to_rod, char helper_rod)
    {
        if (n == 1)
        {
            System.out.println("Take disk 1 from rod " +  from_rod + " to rod " + to_rod);
            return;
        }
        towerOfHanoi(n-1, from_rod, helper_rod, to_rod);
        System.out.println("Take disk " + n + " from rod " +  from_rod + " to rod " + to_rod);
        towerOfHanoi(n-1, helper_rod, to_rod, from_rod);
    }
    
    void otherTowerOfHanoi(int n, char from_rod, char to_rod, char helper_rod)
    {
        if (n == 1)
        {
            System.out.println("Take disk 1 from rod " +  from_rod + " to rod " + to_rod);
            return;
        }
        towerOfHanoi(n-1, from_rod, helper_rod, to_rod);
        System.out.println("Take disk " + n + " from rod " +  from_rod + " to rod " + to_rod);
        towerOfHanoi(n-1, helper_rod, to_rod, from_rod);
    }
    
    static long extractMillisecond(String sValue){
        return 0;
    }
    
    public static long parseTimeValue(String sValue) {

    if (sValue == null) {
        return 0;
    }

    try {
        long millis;
        if (sValue.endsWith("S")) {
            millis = 0;
        } else if (sValue.endsWith("ms")) {
            millis = 0;
        } else if (sValue.endsWith("s")) {
            millis = 0;
        } else if (sValue.endsWith("m")) {
            millis = extractMillisecond(sValue);
            if (sValue.endsWith("H") || sValue.endsWith("h")) {
            millis = 0;
        } else if (sValue.endsWith("d")) {
            millis = 0;
        } else if (sValue.endsWith("w")) {
            millis = 0;
        }
        }  else {
            millis = Long.parseLong(sValue);
        }

        return millis;

    } catch (NumberFormatException e) {
    }

    return 0;
}
}
